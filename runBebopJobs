#!/bin/sh
if [ "$#" -eq 0 ]; then
    echo "Illegal number of parameters: Need to specify the problem class"
fi


if [ "$#" -eq 1 ]; then
#TIME=72:15:00
TIME=24:30:00
#TIME=01:00:00
PROB=$1
NJobs=4
#NJobs=4
#MAIN=DualSCOPF
MAIN=BranchAndCut
OUTPUT=OutputBnB
#OUTPUT=Output
# SBATCH --time=24:30:00
#SBATCH --partition=bdwall
#SBATCH --ntasks=${NJobs}

# Load the default version of GNU parallel.
module load parallel

# When running a large number of tasks simultaneously, it may be
# necessary to increase the user process limit.
ulimit -u 10000

# This specifies the options used to run srun. The "-N1 -n1" options are
# used to allocates a single core to each task.
srun="srun --exclusive -N1 -n1"

# This specifies the options used to run GNU parallel:
#
#   --delay of 0.2 prevents overloading the controlling node.
#
#   -j is the number of tasks run simultaneously.
#
#   The combination of --joblog and --resume create a task log that
#   can be used to monitor progress.
#

# parallel="parallel --delay 0.2 -j ${NJobs} --joblog runtask.log --resume"
parallel="parallel --delay 0.2 -j ${NJobs}"
calljulia="--time=$TIME env OMP_NUM_THREADS=1 JULIA_NUM_THREADS=1 julia --depwarn=no -O3"
# calljulia="julia --depwarn=no -O3"

# Run a script, runtask.sh, using GNU parallel and srun. Parallel
# will run the runtask script for the numbers 1 through 128. To
# illustrate, the first job will run like this:
#
#   srun --exclusive -N1 -n1 ./runtask.sh arg1:1 > runtask.1
#
$parallel "$srun -o ./${OUTPUT}/outCase${PROB}K{1}H{2}R{3} -e ./Error/errCase${PROB}K{1}H{2}R{3} $calljulia ${MAIN}.jl ${PROB} {1} {2} {3}" ::: 1 2 3 4 ::: 0 ::: 0 &
# $parallel "$srun $calljulia BranchAndCut.jl 30 {1} {2} {3} > Output/case30K{1}H{2}R{3}" ::: {1..4} ::: {0..2} ::: 0 1 3
# $parallel "$srun echo {1}{2} > temp{1}{2}" ::: {1..4} ::: {5..8}

# Note that if your program does not take any input, use the -n0 option to
# call the parallel command: 
#
#   $parallel -n0 "$srun ./run_noinput_task.sh > output.{1}" ::: {1..128}

fi

